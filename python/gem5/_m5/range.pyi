from typing import List

from typing import overload

def RangeEx(arg0: int, arg1: int) -> AddrRange: ...
def RangeIn(arg0: int, arg1: int) -> AddrRange: ...
def RangeSize(arg0: int, arg1: int) -> AddrRange: ...

class AddrRange:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: List[int], arg3: int) -> None: ...
    @overload
    def __init__(self, arg0, std) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...
    @overload
    def __init__(*args, **kwargs) -> Any: ...
    def end(self) -> int: ...
    def granularity(self) -> int: ...
    def interleaved(self) -> bool: ...
    def intersects(self, arg0: AddrRange) -> bool: ...
    def isSubset(self, arg0: AddrRange) -> bool: ...
    def mergesWith(self, arg0: AddrRange) -> bool: ...
    def size(self) -> int: ...
    def start(self) -> int: ...
    def stripes(self) -> int: ...
    def valid(self) -> bool: ...

class AddrRangeVector:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: AddrRangeVector) -> None: ...
    @overload
    def __init__(self, arg0: iterable) -> None: ...
    @overload
    def __init__(*args, **kwargs) -> Any: ...
    def append(self, x: AddrRange) -> None: ...
    def count(self, x: AddrRange) -> int: ...
    @overload
    def extend(self, L: AddrRangeVector) -> None: ...
    @overload
    def extend(self, L: iterable) -> None: ...
    @overload
    def extend(*args, **kwargs) -> Any: ...
    def insert(self, i: int, x: AddrRange) -> None: ...
    @overload
    def pop(self) -> AddrRange: ...
    @overload
    def pop(self, i: int) -> AddrRange: ...
    @overload
    def pop(*args, **kwargs) -> Any: ...
    def remove(self, x: AddrRange) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: AddrRange) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    @overload
    def __delitem__(*args, **kwargs) -> Any: ...
    def __eq__(self, arg0: AddrRangeVector) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> AddrRangeVector: ...
    @overload
    def __getitem__(self, arg0: int) -> AddrRange: ...
    @overload
    def __getitem__(*args, **kwargs) -> Any: ...
    def __iter__(self) -> iterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: AddrRangeVector) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: AddrRange) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: AddrRangeVector) -> None: ...
    @overload
    def __setitem__(*args, **kwargs) -> Any: ...
