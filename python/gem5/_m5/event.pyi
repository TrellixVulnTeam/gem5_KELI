from typing import overload

def exitSimLoop(arg0: str, arg1: int, arg2: int, arg3: int, arg4: bool) -> None: ...
@overload
def getEventQueue(arg0: int) -> EventQueue: ...
@overload
def getEventQueue(*args, **kwargs) -> Any: ...
def setEventQueue(arg0: EventQueue) -> None: ...
def simulate(ticks: int = ...) -> GlobalSimLoopExitEvent: ...

class Event:
    CPU_Switch_Pri: Any = ...
    CPU_Tick_Pri: Any = ...
    DVFS_Update_Pri: Any = ...
    Debug_Break_Pri: Any = ...
    Debug_Enable_Pri: Any = ...
    Default_Pri: Any = ...
    Delayed_Writeback_Pri: Any = ...
    Maximum_Pri: Any = ...
    Minimum_Pri: Any = ...
    Progress_Event_Pri: Any = ...
    Serialize_Pri: Any = ...
    Sim_Exit_Pri: Any = ...
    Stat_Event_Pri: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def dump(self) -> None: ...
    def isExitEvent(self) -> bool: ...
    def name(self) -> str: ...
    def priority(self) -> int: ...
    def scheduled(self) -> bool: ...
    def squash(self) -> None: ...
    def squashed(self) -> bool: ...
    def when(self) -> int: ...

class EventQueue:
    def __init__(self, *args, **kwargs) -> None: ...
    def deschedule(self, event: Event) -> None: ...
    def dump(self) -> None: ...
    def name(self) -> str: ...
    def reschedule(self, event: Event, tick: int, always: bool = ...) -> None: ...
    def schedule(self, event: PyEvent, when: int) -> None: ...

class GlobalSimLoopExitEvent:
    def __init__(self, *args, **kwargs) -> None: ...
    def getCause(self) -> str: ...
    def getCode(self) -> int: ...

class PyEvent(Event):
    def __init__(self, priority: int = ...) -> None: ...
