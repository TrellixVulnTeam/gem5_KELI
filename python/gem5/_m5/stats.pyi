from typing import List

import Dict[str,_m5.stats
import List[_m5.stats

def enable(*args, **kwargs) -> Any: ...
def enabled(*args, **kwargs) -> Any: ...
def initSimStats(*args, **kwargs) -> Any: ...
def initText(*args, **kwargs) -> Any: ...
def periodicStatDump(arg0: int) -> None: ...
def processDumpQueue(*args, **kwargs) -> Any: ...
def processResetQueue(*args, **kwargs) -> Any: ...
def registerPythonStatsHandlers(*args, **kwargs) -> Any: ...
def schedStatEvent(arg0: bool, arg1: bool, arg2: int, arg3: int) -> None: ...
def statsList(*args, **kwargs) -> Any: ...
def updateEvents(*args, **kwargs) -> Any: ...

class Group:
    def __init__(self, *args, **kwargs) -> None: ...
    def addStatGroup(self, arg0: str, arg1: Group) -> None: ...
    def getStatGroups(self) -> Dict[str,_m5.stats.Group]: ...
    def getStats(self) -> List[_m5.stats.Info]: ...
    def preDumpStats(self) -> None: ...
    def regStats(self) -> None: ...
    def resetStats(self) -> None: ...
    def resolveStat(self, arg0: str) -> Info: ...

class Info:
    def __init__(self, *args, **kwargs) -> None: ...
    def baseCheck(self) -> bool: ...
    def check(self) -> bool: ...
    def enable(self) -> None: ...
    def prepare(self) -> None: ...
    def reset(self) -> None: ...
    def visit(self, arg0: Output) -> None: ...
    def zero(self) -> bool: ...
    @property
    def desc(self) -> str: ...
    @property
    def flags(self) -> int: ...
    @property
    def id(self) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, val: str) -> None: ...

class Output:
    def __init__(self, *args, **kwargs) -> None: ...
    def begin(self) -> None: ...
    def beginGroup(self, arg0: str) -> None: ...
    def end(self) -> None: ...
    def endGroup(self) -> None: ...
    def valid(self) -> bool: ...
