class DrainManager:
    def __init__(self, *args, **kwargs) -> None: ...
    def instance(self, *args, **kwargs) -> Any: ...
    def isDrained(self) -> bool: ...
    def preCheckpointRestore(self) -> None: ...
    def resume(self) -> None: ...
    def signalDrainDone(self) -> None: ...
    def state(self) -> DrainState: ...
    def tryDrain(self) -> bool: ...

class DrainState:
    Drained: Any = ...
    Draining: Any = ...
    Running: Any = ...
    __entries: Any = ...
    def __init__(self, arg0: int) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __hash__(self) -> Any: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    @property
    def name(self) -> str: ...
    @property
    def __doc__(self) -> str: ...
    @property
    def __members__(self) -> dict: ...

class Drainable:
    def __init__(self, *args, **kwargs) -> None: ...
    def drainState(self) -> DrainState: ...
    def notifyFork(self) -> None: ...
