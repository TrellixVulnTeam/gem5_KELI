from typing import overload

def python_ready(*args) -> None: ...
def sc_main(*args) -> None: ...
def sc_main_result_code(*args, **kwargs) -> Any: ...
def sc_main_result_str(*args, **kwargs) -> Any: ...

class sc_time:
    SC_FS: Any = ...
    SC_MS: Any = ...
    SC_NS: Any = ...
    SC_PS: Any = ...
    SC_SEC: Any = ...
    SC_US: Any = ...
    sc_time_unit: Any = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1) -> None: ...
    @overload
    def __init__(self, arg0: sc_time) -> None: ...
    @overload
    def __init__(*args, **kwargs) -> Any: ...
    def to_double(self) -> float: ...
    def to_seconds(self) -> float: ...
    def to_string(self) -> str: ...
    def value(self) -> int: ...
    def __eq__(self, arg0: sc_time) -> bool: ...
    def __ge__(self, arg0: sc_time) -> bool: ...
    def __gt__(self, arg0: sc_time) -> bool: ...
    def __iadd__(self, arg0: sc_time) -> sc_time: ...
    def __imul__(self, arg0: float) -> sc_time: ...
    def __isub__(self, arg0: sc_time) -> sc_time: ...
    def __itruediv__(self, arg0: float) -> sc_time: ...
    def __le__(self, arg0: sc_time) -> bool: ...
    def __lt__(self, arg0: sc_time) -> bool: ...
    def __ne__(self, arg0: sc_time) -> bool: ...

class tlm_global_quantum:
    def __init__(self, *args, **kwargs) -> None: ...
    def compute_local_quantum(self) -> sc_time: ...
    def get(self) -> sc_time: ...
    def instance(self, *args, **kwargs) -> Any: ...
    def set(self, arg0: sc_time) -> None: ...
