// SPDX-FileCopyrightText: Copyright Â© 2022 by Rivos Inc.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// --- Start of VectorUnitStrideMemLoad

def template VectorUnitStrideMemLoadConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorUnitStrideMemLoadOpClass)
    {
        %(set_reg_idx_arr)s;

        setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, RS1));

        uint32_t eewb = 0;
        switch (FUNCT3) {
            case 0:
                eewb = 1;
                break;
            case 5:
                eewb = 2;
                break;
            case 6:
                eewb = 4;
                break;
            case 7:
                eewb = 8;
                break;
        }

        if (LUMOP == 0 || LUMOP == 0x10) {
            // vle32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6  vd 6..0=0x07
            // vle32ff.v        nf 28=0 27..26=0 vm 24..20=0x10 rs1 14..12=0x6  vd 6..0=0x07
            _numTypedDestRegs[VecRegClass] = ceil((float) machVl / (VecRegSizeBytes/eewb));
        } else if (LUMOP == 0x8) {
            // vl1re16.v      31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
            // vl2re16.v      31..29=1 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
            // vl4re16.v      31..29=3 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
            // vl8re16.v      31..29=7 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
            _numTypedDestRegs[VecRegClass] = NF + 1;
        } else {
            printf("ERROR: Unknown LUMOP value 0x%x for load\n", LUMOP);
        }

        assert((VD % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);

        for (int i = 0; i < _numTypedDestRegs[VecRegClass]; ++i) {
            setDestRegIdx(_numDestRegs++, RegId(VecRegClass, VD + i));
        }

        if (VM == 0) {
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
            ++_numVecSrcRegs;
        }

        flags[IsLoad] = true;
        flags[IsVector] = true;;
    }
}};

def template VectorUnitStrideMemLoadExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        uint32_t vl = xc->readMiscReg(MISCREG_VL);
        VTYPE vtype = xc->readMiscReg(MISCREG_VTYPE);
        size_t sewb = getSew(vtype.vsew) / 8;

        uint32_t eewb = 0;
        switch (FUNCT3) {
            case 0:
                eewb = 1;
                break;
            case 5:
                eewb = 2;
                break;
            case 6:
                eewb = 4;
                break;
            case 7:
                eewb = 8;
                break;
            default:
                std::string error = csprintf(
                    "Illegal eew value: 0x%x\n", FUNCT3);
                return std::make_shared<IllegalInstFault>(error, machInst);
                break;
        }

        float vemul = ((float) eewb / sewb) * getVflmul(vtype.vlmul);

        if ((vemul < 0.125) || (vemul > 8)) {
            std::string error = csprintf(
                "Illegal vemul value: %f\n", vemul);
            return std::make_shared<IllegalInstFault>(error, machInst);
        }

        %(op_decl)s;

        Rs1 = xc->getRegOperand(this, 0);

        for (uint32_t destVecRegID = 0; destVecRegID < _numTypedDestRegs[VecRegClass]; ++destVecRegID) {
            auto &Vd_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, destVecRegID);

            uint32_t vmask = UINT32_MAX;
            if (VM == 0) {
                TheISA::VecRegContainer Vmask_container;
                xc->getRegOperand(this, _numSrcRegs - 1, &Vmask_container);
                switch(sewb) {
                    case 1:
                        vmask = Vmask_container.as<uint32_t>()[destVecRegID];
                        break;
                    case 2:
                        vmask = Vmask_container.as<uint16_t>()[destVecRegID];
                        break;
                    case 4:
                        vmask = Vmask_container.as<uint8_t>()[destVecRegID];
                        break;
                    case 8:
                        vmask = Vmask_container.as<uint8_t>()[destVecRegID/2];
                        vmask = (vmask >> (destVecRegID % 2));
                        break;
                }
            }

            size_t num_target_elements_in_reg = 0;
            if (LUMOP == 0 || LUMOP == 0x10) {
                // vle32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6  vd 6..0=0x07
                // vle32ff.v        nf 28=0 27..26=0 vm 24..20=0x10 rs1 14..12=0x6  vd 6..0=0x07
                num_target_elements_in_reg =
                    (VecRegSizeBytes/eewb) > vl ? vl : (VecRegSizeBytes/eewb);
            } else if (LUMOP == 0x8) {
                // vl1re32.v      31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x6 vd  6..0=0x07
                num_target_elements_in_reg = xc->readMiscReg(MISCREG_VLENB) / eewb;
            }

            if (fault == NoFault) {
                if (eewb == 1) {
                    auto Vd = Vd_container.as<uint8_t>();
                    for (uint32_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }

                        uint64_t offset =
                            (regElemID * sizeof(uint8_t)) +
                                (destVecRegID * num_target_elements_in_reg * sizeof(uint8_t));
                        %(code)s;
                    }
                } else if (eewb == 2) {
                    auto Vd = Vd_container.as<uint16_t>();
                    for (uint32_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }

                        uint64_t offset =
                            (regElemID * sizeof(uint16_t)) +
                                (destVecRegID * num_target_elements_in_reg * sizeof(uint16_t));
                        %(code)s;
                    }
                } else if (eewb == 4) {
                    auto Vd = Vd_container.as<uint32_t>();
                    for (uint32_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }

                        uint64_t offset =
                            (regElemID * sizeof(uint32_t)) +
                                (destVecRegID * num_target_elements_in_reg * sizeof(uint32_t));
                        %(code)s;
                    }
                } else if (eewb == 8) {
                    auto Vd = Vd_container.as<uint64_t>();
                    for (uint32_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }

                        uint64_t offset =
                            (regElemID * sizeof(uint64_t)) +
                                (destVecRegID * num_target_elements_in_reg * sizeof(uint64_t));
                        %(code)s;
                    }
                } else {
                    std::string error = csprintf(
                        "Unexpected eewb value in instruction");
                    return std::make_shared<IllegalInstFault>(error, machInst);
                }

                if (fault == NoFault) {
                    if (traceData) {
                        // TODO: Print all destination registers
                        traceData->setData(Vd_container);
                    }
                }

                vl = vl - num_target_elements_in_reg;
            }
        }

        return fault;
    }
}};

def template VectorUnitStrideMemLoadDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        // Example:
        // vle32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6  vd 6..0=0x07
        // Sources: Rs1 + 1 mask register.
        RegId srcRegIdxArr[1 + 1];
        // Destinations: up to 8 vector regs starting at Vd
        RegId destRegIdxArr[8];

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorUnitStrideMemLoadOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'VectorUnitStrideMemLoadOp', code, opt_flags)
    header_output = VectorUnitStrideMemLoadDeclare.subst(iop)
    decoder_output = VectorUnitStrideMemLoadConstructor.subst(iop)
    decode_block = VectorDecode.subst(iop)
    exec_output = VectorUnitStrideMemLoadExecute.subst(iop)
}};

// --- End of VectorUnitStrideMemLoad

// --- Start of VectorUnitStrideMemLoad

def template VectorUnitStrideMemLoadStoreMacroConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorUnitStrideMemLoadMacroOpClass, machVtype, machVl, vlen)
    {
        uint32_t eew = 0;
        switch (FUNCT3) {
            case 0:
                eew = 8;
                break;
            case 5:
                eew = 16;
                break;
            case 6:
                eew = 32;
                break;
            case 7:
                eew = 64;
                break;
            default:
                eew = 0;
        }

        //if (LUMOP == 0 || LUMOP == 0x10) {
        //    // vle32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6  vd 6..0=0x07
        //    // vle32ff.v        nf 28=0 27..26=0 vm 24..20=0x10 rs1 14..12=0x6  vd 6..0=0x07
        //    _numTypedDestRegs[VecRegClass] = ceil((float) machVl / (VecRegSizeBytes/eewb));
        //} else if (LUMOP == 0x8) {
        //    // vl1re16.v      31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
        //    // vl2re16.v      31..29=1 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
        //    // vl4re16.v      31..29=3 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
        //    // vl8re16.v      31..29=7 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
        //    _numTypedDestRegs[VecRegClass] = NF + 1;
        //} else {
        //    printf("ERROR: Unknown LUMOP value 0x%x for load\n", LUMOP);
        //}
        //assert(NF != 0); // instruction with NFIELDS > 0 is currently not supported

        //assert((VD % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);

        // for (int i = 0; i < _numTypedDestRegs[VecRegClass]; ++i) {
        //     setDestRegIdx(_numDestRegs++, RegId(VecRegClass, VD + i));
        // }

        auto sew = getSew(machVtype.vsew);
        uint32_t num_elements_per_reg = vlen / eew;
        uint32_t element_count = machVl;

        auto num_vregs = eew / sew * vlmulToNumRegs(machVtype.vlmul); // i.e. EMUL
        assert(num_vregs <= 8);

        for (uint32_t reg_id_offset = 0; reg_id_offset < num_vregs; reg_id_offset++)
        {
            for (uint32_t element_index = 0; element_index < num_elements_per_reg; element_index++) // element_index is the index of an element within its vector register
            {
                bool is_tail_element = reg_id_offset*num_elements_per_reg+element_index >= element_count;
                if (!is_tail_element)
                {
                    StaticInstPtr uop = new %(class_name)sMicro(machInst, machVtype, machVl,
                        VD+reg_id_offset, VM, reg_id_offset*num_elements_per_reg+element_index, num_elements_per_reg,
                        (element_count < num_elements_per_reg) ? element_count : num_elements_per_reg,
                        eew, (uint64_t)machVtype.vma, (uint64_t)machVtype.vta);
                    microops.push_back(std::move(uop));
                }
            }
            element_count = (element_count >= num_elements_per_reg) ? (element_count - num_elements_per_reg) : 0; // TODO: refactor this
        }

        if (microops.size() == 0)
        {
            StaticInstPtr uop = new Addi(0x13);
            microops.push_back(uop);
        }

        microops.front()->setFlag(IsFirstMicroop);
        microops.back()->setFlag(IsLastMicroop);

        flags[IsVector] = true;
    }
}};

def template VectorUnitStrideMemLoadMicroDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s::%(class_name)sMicro : public %(base_class)s
    {
      private:
        // Example:
        // vle32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6  vd 6..0=0x07
        // Sources: Rs1 + 1 mask register.
        RegId srcRegIdxArr[1 + 1];
        // Destinations: write to one element in one Vd
        RegId destRegIdxArr[1];

      public:
        /// Constructor.
        %(class_name)sMicro(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl,
            uint64_t vdRegID, uint64_t vmRegID, uint64_t mask_offset,
            uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
            uint64_t eew, uint64_t mask_policy, uint64_t tail_policy);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
        Fault completeAcc(Packet *, ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def template VectorUnitStrideMemLoadMicroConstructor {{
    %(class_name)s::%(class_name)sMicro::%(class_name)sMicro(MachInst machInst,
        RiscvISA::VTYPE machVtype, uint32_t machVl,
        uint64_t vdRegID, uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t eew, uint64_t mask_policy, uint64_t tail_policy)
        : %(base_class)s("%(mnemonic)s", machInst, VectorUnitStrideMemLoadMicroOpClass,
            vdRegID, vmRegID, mask_offset,
            num_elements_per_reg, num_non_tail_elements,
            eew, mask_policy, tail_policy)
    {
        %(set_reg_idx_arr)s;

        // Example:
        // vle32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6  vd 6..0=0x07
        // vreg[vdRegID] = mem[EA+element_index*element_size_bytes]

        setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, RS1));

        // Set register dependencies
        setDestRegIdx(_numDestRegs++, RegId(VecRegClass, vdRegID));
        if (vmRegID == 0) { // The mask register is always v0
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
        }

        _numVecSrcRegs = _numSrcRegs;

        flags[IsInteger] = false;
        flags[IsLoad] = true;
        flags[IsVector] = true;
        flags[IsMicroop] = true;
    }
}};

def template VectorUnitStrideMemLoadMicroExecute {{
    Fault
    %(class_name)s::%(class_name)sMicro::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        // Getting the source / destination registers
        // We only have one destination reg per micro op, so it's safe to say that the Vd is the first writable reg
        auto &Vd_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, 0);

        bool masked_off = false; // masked_off == true -> do not compute the element; otherwise compute the element if it is not a tail element

        // Figure out if we need masks
        if (vmRegID == 0) {
            TheISA::VecRegContainer Vmask_container;
            xc->getRegOperand(this, 1, &Vmask_container);
            auto vmask = Vmask_container.as<uint8_t>();
            masked_off = (bits(vmask[mask_offset / 8], mask_offset % 8, mask_offset % 8) == 0);
        }

        bool utilize_mask = vmRegID == 0;
        uint32_t regElemID = mask_offset % num_elements_per_reg;
        bool is_tail_element = regElemID >= num_non_tail_elements;

        %(op_decl)s;
        Rs1 = xc->getRegOperand(this, 0);

        if (fault == NoFault && (!utilize_mask || !masked_off)) {
            if (eew == 8) {
                if (!is_tail_element)
                {
                    auto Vd = Vd_container.as<uint8_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint8_t);
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 16) {
                if (!is_tail_element)
                {
                    auto Vd = Vd_container.as<uint16_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint16_t);
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 32) {
                if (!is_tail_element)
                {
                    auto Vd = Vd_container.as<uint32_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint32_t);
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 64) {
                if (!is_tail_element)
                {
                    auto Vd = Vd_container.as<uint64_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint64_t);
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else {
                //std::string error = csprintf(
                //    "Illegal vsewb value in VTYPE: 0x%x\n", eew);
                //return std::make_shared<IllegalInstFault>(error, machInst);
            }

            if (fault == NoFault) {
                if (traceData) {
                    traceData->setData(Vd_container);
                }
            }
        }

        return fault;
    }
}};

def template VectorUnitStrideMemLoadMicroInitiateAcc {{
    Fault
    %(class_name)s::%(class_name)sMicro::initiateAcc(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        Addr EA = 0;
        uint64_t Rs1 = 0;
        Rs1 = xc->getRegOperand(this, 0);
        
        // Getting the source / destination registers
        bool masked_off = false; // masked_off == true -> do not compute the element; otherwise compute the element if it is not a tail element

        // Figure out if we need masks
        if (vmRegID == 0) {
            TheISA::VecRegContainer Vmask_container;
            xc->getRegOperand(this, 1, &Vmask_container);
            auto vmask = Vmask_container.as<uint8_t>();
            masked_off = (bits(vmask[mask_offset / 8], mask_offset % 8, mask_offset % 8) == 0);
        }

        bool utilize_mask = vmRegID == 0;
        uint32_t regElemID = mask_offset % num_elements_per_reg;
        bool is_tail_element = regElemID >= num_non_tail_elements;

        if (fault == NoFault && (!utilize_mask || !masked_off)) {
            if (eew == 8) {
                if (!is_tail_element)
                {
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint8_t);
                    EA = Rs1 + offset;
                    uint8_t Mem = {}; // the type of this variable is used for determining how many bytes this mem access returns
                    return initiateMemRead(xc, traceData, EA, Mem, memAccessFlags);
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 16) {
                if (!is_tail_element)
                {
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint16_t);
                    EA = Rs1 + offset;
                    uint16_t Mem = {}; // the type of this variable is used for determining how many bytes this mem access returns
                    return initiateMemRead(xc, traceData, EA, Mem, memAccessFlags);
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 32) {
                if (!is_tail_element)
                {
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint32_t);
                    EA = Rs1 + offset;
                    uint32_t Mem = {}; // the type of this variable is used for determining how many bytes this mem access returns
                    return initiateMemRead(xc, traceData, EA, Mem, memAccessFlags);
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 64) {
                if (!is_tail_element)
                {
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint64_t);
                    EA = Rs1 + offset;
                    uint64_t Mem = {}; // the type of this variable is used for determining how many bytes this mem access returns
                    return initiateMemRead(xc, traceData, EA, Mem, memAccessFlags);
                }
                // TODO: apply tail policy to tail elements
            } else {
                std::string error = csprintf("Illegal value for eew: 0x%x\n", eew);
                return std::make_shared<IllegalInstFault>(error, machInst);
            }
        }
        return NoFault;
    }
}};

def template VectorUnitStrideMemLoadMicroCompleteAcc {{
    Fault
    %(class_name)s::%(class_name)sMicro::completeAcc(Packet *pkt,
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        uint32_t regElemID = mask_offset % num_elements_per_reg;
        auto &Vd_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, 0);

        if (eew == 8) {
            uint8_t Mem = {};
            getMemLE(pkt, Mem, traceData);
            auto Vd = Vd_container.as<uint8_t>();
            Vd[regElemID] = Mem;
        } else if (eew == 16) {
            uint16_t Mem = {};
            getMemLE(pkt, Mem, traceData);
            auto Vd = Vd_container.as<uint16_t>();
            Vd[regElemID] = Mem;
        } else if (eew == 32) {
            uint32_t Mem = {};
            getMemLE(pkt, Mem, traceData);
            auto Vd = Vd_container.as<uint32_t>();
            Vd[regElemID] = Mem;
        } else if (eew == 64) {
            uint64_t Mem = {};
            getMemLE(pkt, Mem, traceData);
            auto Vd = Vd_container.as<uint64_t>();
            Vd[regElemID] = Mem;
        }
        return fault;
    }
}};

def format VectorUnitStrideMemLoadMacroOp(code, *opt_flags) {{
    macro_iop = InstObjParams(name, Name, 'VectorUnitStrideMemLoadMacroOp', code, opt_flags)
    header_output = VectorMacroDeclare.subst(macro_iop)
    decoder_output = VectorUnitStrideMemLoadStoreMacroConstructor.subst(macro_iop)
    decode_block = VectorMacroDecode.subst(macro_iop)
    exec_output = VectorMacroExecute.subst(macro_iop)

    uop_iop = InstObjParams(name, Name, 'VectorUnitStrideMemLoadMicroOp', code, opt_flags)
    header_output += VectorUnitStrideMemLoadMicroDeclare.subst(uop_iop)
    decoder_output += VectorUnitStrideMemLoadMicroConstructor.subst(uop_iop)
    decode_block += VectorDecode.subst(uop_iop)
    exec_output += VectorUnitStrideMemLoadMicroExecute.subst(uop_iop)
    exec_output += VectorUnitStrideMemLoadMicroInitiateAcc.subst(uop_iop)
    exec_output += VectorUnitStrideMemLoadMicroCompleteAcc.subst(uop_iop)
}};

// --- End of VectorUnitStrideMemLoad

// --- Start of VectorUnitStrideMemStore

def template VectorUnitStrideMemStoreConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorUnitStrideMemStoreOpClass)
    {
        %(set_reg_idx_arr)s;

        uint32_t eewb = 0;
        switch (FUNCT3) {
            case 0:
                eewb = 1;
                break;
            case 5:
                eewb = 2;
                break;
            case 6:
                eewb = 4;
                break;
            case 7:
                eewb = 8;
                break;
        }

        // Example:
        setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, RS1));

        if (LUMOP == 0) {
            // vse32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6 vs3 6..0=0x27
            _numVecSrcRegs = ceil((float) machVl / (VecRegSizeBytes/eewb));
        } else if (LUMOP == 0x8) {
            // vs1r.v         31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vs3 6..0=0x27
            _numVecSrcRegs = NF + 1;
        } else {
            // vs1r.v         31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vs3 6..0=0x27
            // vs2r.v         31..29=1 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vs3 6..0=0x27
            // vs4r.v         31..29=3 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vs3 6..0=0x27
            // vs8r.v         31..29=7 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vs3 6..0=0x27
            printf("ERROR: Unknown LUMOP value 0x%x for store\n", LUMOP);
        }

        assert((VS3 % alignToPowerOfTwo(_numVecSrcRegs)) == 0);

        for (int i = 0; i < _numVecSrcRegs; ++i) {
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, VS3 + i));
        }

        if (VM == 0) {
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
            ++_numVecSrcRegs;
        }

        flags[IsStore] = true;
        flags[IsVector] = true;;
    }
}};

def template VectorUnitStrideMemStoreExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        uint32_t vl = xc->readMiscReg(MISCREG_VL);
        VTYPE vtype = xc->readMiscReg(MISCREG_VTYPE);
        size_t sewb = getSew(vtype.vsew) / 8;

        uint32_t eewb = 0;
        switch (FUNCT3) {
            case 0:
                eewb = 1;
                break;
            case 5:
                eewb = 2;
                break;
            case 6:
                eewb = 4;
                break;
            case 7:
                eewb = 8;
                break;
            default:
                std::string error = csprintf(
                    "Illegal eew value: 0x%x\n", FUNCT3);
                return std::make_shared<IllegalInstFault>(error, machInst);
                break;
        }

        float vemul = ((float) eewb / sewb) * getVflmul(vtype.vlmul);

        if ((vemul < 0.125) || (vemul > 8)) {
            std::string error = csprintf(
                "Illegal vemul value: %f\n", vemul);
            return std::make_shared<IllegalInstFault>(error, machInst);
        }

        %(op_decl)s;

        Rs1 = xc->getRegOperand(this, 0);

        for (uint32_t srcVecRegIdx = 0; srcVecRegIdx < _numVecSrcRegs; ++srcVecRegIdx) {
            TheISA::VecRegContainer Vs3_container;
            xc->getRegOperand(this, srcVecRegIdx + 1, &Vs3_container);

            uint32_t vmask = UINT32_MAX;
            if (VM == 0) {
                TheISA::VecRegContainer Vmask_container;
                xc->getRegOperand(this, _numSrcRegs - 1, &Vmask_container);
                switch(sewb) {
                    case 1:
                        vmask = Vmask_container.as<uint32_t>()[srcVecRegIdx];
                        break;
                    case 2:
                        vmask = Vmask_container.as<uint16_t>()[srcVecRegIdx];
                        break;
                    case 4:
                        vmask = Vmask_container.as<uint8_t>()[srcVecRegIdx];
                        break;
                    case 8:
                        vmask = Vmask_container.as<uint8_t>()[srcVecRegIdx/2];
                        vmask = (vmask >> (srcVecRegIdx % 2));
                        break;
                }
            }

            size_t num_elements_in_vector_reg = 0;
            if (LUMOP == 0 || LUMOP == 0x10) {
                // vle32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6  vd 6..0=0x07
                // vle32ff.v        nf 28=0 27..26=0 vm 24..20=0x10 rs1 14..12=0x6  vd 6..0=0x07
                num_elements_in_vector_reg =
                    (VecRegSizeBytes/eewb) > vl ? vl : (VecRegSizeBytes/eewb);
            } else if (LUMOP == 0x8) {
                // vl1re32.v      31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x6 vd  6..0=0x07
                num_elements_in_vector_reg = xc->readMiscReg(MISCREG_VLENB) / eewb;
            }

            if (fault == NoFault) {
                if (eewb == 1) {
                    auto Vs3 = Vs3_container.as<uint8_t>();
                    for (uint32_t regElemID = 0; regElemID < num_elements_in_vector_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }

                        uint64_t offset =
                            (regElemID * sizeof(uint8_t)) +
                                (srcVecRegIdx * num_elements_in_vector_reg * sizeof(uint8_t));

                        %(code)s;
                    }
                } else if (eewb == 2) {
                    auto Vs3 = Vs3_container.as<uint16_t>();
                    for (uint32_t regElemID = 0; regElemID < num_elements_in_vector_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }

                        uint64_t offset =
                            (regElemID * sizeof(uint16_t)) +
                                (srcVecRegIdx * num_elements_in_vector_reg * sizeof(uint16_t));

                        %(code)s;
                    }
                } else if (eewb == 4) {
                    auto Vs3 = Vs3_container.as<uint32_t>();
                    for (uint32_t regElemID = 0; regElemID < num_elements_in_vector_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }

                        uint64_t offset =
                            (regElemID * sizeof(uint32_t)) +
                                (srcVecRegIdx * num_elements_in_vector_reg * sizeof(uint32_t));

                        %(code)s;
                    }
                } else if (eewb == 8) {
                    auto Vs3 = Vs3_container.as<uint64_t>();
                    for (uint32_t regElemID = 0; regElemID < num_elements_in_vector_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }

                        uint64_t offset =
                            (regElemID * sizeof(uint64_t)) +
                                (srcVecRegIdx * num_elements_in_vector_reg * sizeof(uint64_t));

                        %(code)s;
                    }
                } else {
                    std::string error = csprintf(
                        "Unexpected eewb value in instruction");
                    return std::make_shared<IllegalInstFault>(error, machInst);
                }

                vl = vl - num_elements_in_vector_reg;
            }
        }

        return fault;
    }
}};

def template VectorUnitStrideMemStoreDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        // Example:
        // vse32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6 vs3 6..0=0x27
        // Sources: Rs1 + up to 8 vector registers starting at Vs3 and
        //          1 mask register.
        RegId srcRegIdxArr[1 + 8 + 1];

        // Need a dummy destRegIdxArr even though we have no destination regs
        RegId destRegIdxArr[0];

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorUnitStrideMemStoreOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'VectorUnitStrideMemStoreOp', code, opt_flags)
    header_output = VectorUnitStrideMemStoreDeclare.subst(iop)
    decoder_output = VectorUnitStrideMemStoreConstructor.subst(iop)
    decode_block = VectorDecode.subst(iop)
    exec_output = VectorUnitStrideMemStoreExecute.subst(iop)
}};

// --- End of VectorUnitStrideMemStore

// --- Start of VectorUnitStrideMemStore

def template VectorUnitStrideMemStoreMicroDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s::%(class_name)sMicro : public %(base_class)s
    {
      private:
        // Example:
        // vse32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6 vs3 6..0=0x27
        // Sources: Rs1 + one Vs3 + 1 mask register.
        RegId srcRegIdxArr[1 + 1 + 1];

        // Need a dummy destRegIdxArr even though we have no destination regs
        RegId destRegIdxArr[0];

      public:
        /// Constructor.
        %(class_name)sMicro(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl,
            uint64_t vdRegID, uint64_t vmRegID, uint64_t mask_offset,
            uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
            uint64_t eew, uint64_t mask_policy, uint64_t tail_policy);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
        Fault completeAcc(Packet *, ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def template VectorUnitStrideMemStoreMicroConstructor {{
    %(class_name)s::%(class_name)sMicro::%(class_name)sMicro(MachInst machInst,
        RiscvISA::VTYPE machVtype, uint32_t machVl,
        uint64_t vs3RegID, uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t eew, uint64_t mask_policy, uint64_t tail_policy)
        : %(base_class)s("%(mnemonic)s", machInst, VectorUnitStrideMemLoadMicroOpClass,
            vs3RegID, vmRegID, mask_offset,
            num_elements_per_reg, num_non_tail_elements,
            eew, mask_policy, tail_policy)
    {
        %(set_reg_idx_arr)s;

        setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, RS1));

        // Set register dependencies
        setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, vs3RegID));
        if (vmRegID == 0) { // The mask register is always v0
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
        }

        _numVecSrcRegs = _numSrcRegs;

        flags[IsInteger] = false;
        flags[IsStore] = true;
        flags[IsVector] = true;
        flags[IsMicroop] = true;
    }
}};


def template VectorUnitStrideMemStoreMicroExecute {{
    Fault
    %(class_name)s::%(class_name)sMicro::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        // Getting the source / destination registers
        %(op_decl)s;
        Rs1 = xc->getRegOperand(this, 0);
        TheISA::VecRegContainer Vs3_container;
        xc->getRegOperand(this, 1, &Vs3_container);

        bool masked_off = false; // masked_off == true -> do not compute the element; otherwise compute the element if it is not a tail element

        // Figure out if we need masks
        if (vmRegID == 0) {
            TheISA::VecRegContainer Vmask_container;
            xc->getRegOperand(this, 1, &Vmask_container);
            auto vmask = Vmask_container.as<uint8_t>();
            masked_off = (bits(vmask[mask_offset / 8], mask_offset % 8, mask_offset % 8) == 0);
        }

        bool utilize_mask = vmRegID == 0;
        uint32_t regElemID = mask_offset % num_elements_per_reg;
        bool is_tail_element = regElemID >= num_non_tail_elements;

        if (fault == NoFault && (!utilize_mask || !masked_off)) {
            if (eew == 8) {
                if (!is_tail_element)
                {
                    auto Vs3 = Vs3_container.as<uint8_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint8_t);
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 16) {
                if (!is_tail_element)
                {
                    auto Vs3 = Vs3_container.as<uint16_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint16_t);
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 32) {
                if (!is_tail_element)
                {
                    auto Vs3 = Vs3_container.as<uint32_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint32_t);
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 64) {
                if (!is_tail_element)
                {
                    auto Vs3 = Vs3_container.as<uint64_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint64_t);
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else {
                std::string error = csprintf("Illegal value for eew: 0x%x\n", eew);
                return std::make_shared<IllegalInstFault>(error, machInst);
            }
        }

        return fault;
    }
}};

def template VectorUnitStrideMemStoreMicroInitiateAcc {{
    Fault
    %(class_name)s::%(class_name)sMicro::initiateAcc(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        // Getting the source / destination registers
        uint64_t Rs1 = 0;
        Rs1 = xc->getRegOperand(this, 0);
        TheISA::VecRegContainer Vs3_container;
        xc->getRegOperand(this, 1, &Vs3_container);

        bool masked_off = false; // masked_off == true -> do not compute the element; otherwise compute the element if it is not a tail element

        // Figure out if we need masks
        if (vmRegID == 0) {
            TheISA::VecRegContainer Vmask_container;
            xc->getRegOperand(this, 1, &Vmask_container);
            auto vmask = Vmask_container.as<uint8_t>();
            masked_off = (bits(vmask[mask_offset / 8], mask_offset % 8, mask_offset % 8) == 0);
        }

        bool utilize_mask = vmRegID == 0;
        uint32_t regElemID = mask_offset % num_elements_per_reg;
        bool is_tail_element = regElemID >= num_non_tail_elements;

        if (fault == NoFault && (!utilize_mask || !masked_off)) {
            if (eew == 8) {
                if (!is_tail_element)
                {
                    auto Vs3 = Vs3_container.as<uint8_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint8_t);
                    Addr effective_address = Rs1 + offset;
                    uint8_t Mem = Vs3[regElemID];
                    fault = writeMemTimingLE(xc, traceData, Mem, effective_address, memAccessFlags, nullptr);
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 16) {
                if (!is_tail_element)
                {
                    auto Vs3 = Vs3_container.as<uint16_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint16_t);
                    Addr effective_address = Rs1 + offset;
                    uint16_t Mem = Vs3[regElemID];
                    fault = writeMemTimingLE(xc, traceData, Mem, effective_address, memAccessFlags, nullptr);
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 32) {
                if (!is_tail_element)
                {
                    auto Vs3 = Vs3_container.as<uint32_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint32_t);
                    Addr effective_address = Rs1 + offset;
                    uint32_t Mem = Vs3[regElemID];
                    fault = writeMemTimingLE(xc, traceData, Mem, effective_address, memAccessFlags, nullptr);
                }
                // TODO: apply tail policy to tail elements
            } else if (eew == 64) {
                if (!is_tail_element)
                {
                    auto Vs3 = Vs3_container.as<uint64_t>();
                    // process non-tail elements
                    Addr offset = mask_offset * sizeof(uint64_t);
                    Addr effective_address = Rs1 + offset;
                    uint64_t Mem = Vs3[regElemID];
                    fault = writeMemTimingLE(xc, traceData, Mem, effective_address, memAccessFlags, nullptr);
                }
                // TODO: apply tail policy to tail elements
            } else {
                std::string error = csprintf("Illegal value for eew: 0x%x\n", eew);
                return std::make_shared<IllegalInstFault>(error, machInst);
            }
        }

        return NoFault;
    }
}};

def template VectorUnitStrideMemStoreMicroCompleteAcc {{
    Fault
    %(class_name)s::%(class_name)sMicro::completeAcc(Packet *pkt,
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;
        return fault;
    }
}};

def format VectorUnitStrideMemStoreMacroOp(code, *opt_flags) {{
    macro_iop = InstObjParams(name, Name, 'VectorUnitStrideMemStoreMacroOp', code, opt_flags)
    header_output = VectorMacroDeclare.subst(macro_iop)
    decoder_output = VectorUnitStrideMemLoadStoreMacroConstructor.subst(macro_iop)
    decode_block = VectorMacroDecode.subst(macro_iop)
    exec_output = VectorMacroExecute.subst(macro_iop)

    uop_iop = InstObjParams(name, Name, 'VectorUnitStrideMemStoreMicroOp', code, opt_flags)
    header_output += VectorUnitStrideMemStoreMicroDeclare.subst(uop_iop)
    decoder_output += VectorUnitStrideMemStoreMicroConstructor.subst(uop_iop)
    decode_block += VectorDecode.subst(uop_iop)
    exec_output += VectorUnitStrideMemStoreMicroExecute.subst(uop_iop)
    exec_output += VectorUnitStrideMemStoreMicroInitiateAcc.subst(uop_iop)
    exec_output += VectorUnitStrideMemStoreMicroCompleteAcc.subst(uop_iop)
}};

// --- End of VectorUnitStrideMemStore

// --- Start of VectorVdVs2Vs1

def template VectorVdVs2Vs1OpConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorVdVs2Vs1OpClass)
    {
        %(set_reg_idx_arr)s;

        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
        uint32_t sewb = getSew(machVtype.vsew) / 8;

        _numTypedDestRegs[VecRegClass] =
            ceil((float) machVl / (VecRegSizeBytes / sewb));
        assert((VD % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);
        assert((VS1 % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);
        assert((VS2 % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);

        for (int i = 0; i < _numTypedDestRegs[VecRegClass]; ++i) {
            setDestRegIdx(_numDestRegs++, RegId(VecRegClass, VD + i));
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, VS2 + i));
        }

        for (int i = 0; i < _numTypedDestRegs[VecRegClass]; ++i) {
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, VS1 + i));
        }

        if (VM == 0) {
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
        }

        _numVecSrcRegs = _numSrcRegs;

        flags[IsInteger] = false;
        flags[IsVector] = true;;
    }
}};

def template VectorVdVs2Vs1OpExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        uint32_t vl = xc->readMiscReg(MISCREG_VL);
        VTYPE vtype = xc->readMiscReg(MISCREG_VTYPE);
        size_t sewb = getSew(vtype.vsew) / 8;

        if (VM == 0) {
             if (VD == 0 || VS1 == 0 || VS2 == 0) {
                std::string error =
                    csprintf("Masked VectorVdVs2Vs1Op using v0 "
                             "as src/dst register\n");
                return std::make_shared<IllegalInstFault>(error, machInst);
             }
        }

        for (uint32_t destVecRegID = 0; destVecRegID < _numTypedDestRegs[VecRegClass]; ++destVecRegID) {
            auto &Vd_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, destVecRegID);
            TheISA::VecRegContainer Vs2_container;
            xc->getRegOperand(this, destVecRegID, &Vs2_container);
            TheISA::VecRegContainer Vs1_container;
            xc->getRegOperand(this, _numTypedDestRegs[VecRegClass] + destVecRegID, &Vs1_container);

            uint32_t vmask = UINT32_MAX;
            if (VM == 0) {
                TheISA::VecRegContainer Vmask_container;
                xc->getRegOperand(this, _numSrcRegs - 1, &Vmask_container);
                switch(sewb) {
                    case 1:
                        vmask = Vmask_container.as<uint32_t>()[destVecRegID];
                        break;
                    case 2:
                        vmask = Vmask_container.as<uint16_t>()[destVecRegID];
                        break;
                    case 4:
                        vmask = Vmask_container.as<uint8_t>()[destVecRegID];
                        break;
                    case 8:
                        vmask = Vmask_container.as<uint8_t>()[destVecRegID/2];
                        vmask = (vmask >> (destVecRegID % 2));
                        break;
                }
            }

            size_t num_target_elements_in_reg =
                (VecRegSizeBytes/sewb) > vl ? vl : (VecRegSizeBytes/sewb);

            if (fault == NoFault) {
                if (sewb == 1) {
                    auto Vd = Vd_container.as<uint8_t>();
                    auto Vs2 = Vs2_container.as<uint8_t>();
                    auto Vs1 = Vs1_container.as<uint8_t>();
                    for (uint32_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }
                        %(code)s;
                    }
                } else if (sewb == 2) {
                    auto Vd = Vd_container.as<uint16_t>();
                    auto Vs2 = Vs2_container.as<uint16_t>();
                    auto Vs1 = Vs1_container.as<uint16_t>();
                    for (uint32_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }
                        %(code)s;
                    }
                } else if (sewb == 4) {
                    auto Vd = Vd_container.as<uint32_t>();
                    auto Vs2 = Vs2_container.as<uint32_t>();
                    auto Vs1 = Vs1_container.as<uint32_t>();
                    for (uint32_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }
                        %(code)s;
                    }
                } else if (sewb == 8) {
                    auto Vd = Vd_container.as<uint64_t>();
                    auto Vs2 = Vs2_container.as<uint64_t>();
                    auto Vs1 = Vs1_container.as<uint64_t>();
                    for (uint32_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }
                        %(code)s;
                    }
                } else {
                    std::string error = csprintf(
                        "Illegal vsewb value in VTYPE: 0x%x\n", vtype.vsew);
                    return std::make_shared<IllegalInstFault>(error, machInst);
                }

                if (fault == NoFault) {
                    if (traceData) {
                        traceData->setData(Vd_container);
                    }
                }

                vl = vl - num_target_elements_in_reg;
            }
        }

        return fault;
    }
}};

def template VectorVdVs2Vs1Declare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
        // Sources: up to 8 vector regs starting at Vs2 and
        //          up to 8 vector regs starting at Vs1 and
        //          1 mask register.
        RegId srcRegIdxArr[8 + 8 + 1];
        // Destinations: up to 8 vector regs starting at Vd
        RegId destRegIdxArr[8];

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorVdVs2Vs1Op(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'VectorVdVs2Vs1Op', code, opt_flags)
    header_output = VectorVdVs2Vs1Declare.subst(iop)
    decoder_output = VectorVdVs2Vs1OpConstructor.subst(iop)
    decode_block = VectorDecode.subst(iop)
    exec_output = VectorVdVs2Vs1OpExecute.subst(iop)
}};

// --- End of VectorVdVs2Vs1

// --- Start of VectorVdVs2Vs1

def template VectorMacroDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;

      protected:
        class %(class_name)sMicro;
    };
}};

def template VectorVdVs2Vs1MacroOpConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorVdVs2Vs1MacroOpClass, machVtype, machVl, vlen)
    {
        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57

        //_numTypedDestRegs[VecRegClass] =
        //    ceil((float) machVl / (VecRegSizeBytes / sewb));
        //assert((VD % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);
        //assert((VS1 % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);
        //assert((VS2 % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);

        auto sew = getSew(machVtype.vsew);
        uint32_t num_elements_per_reg = vlen / sew;
        uint32_t element_count = machVl;

        auto num_vregs = vlmulToNumRegs(machVtype.vlmul);
        microops = std::vector<StaticInstPtr>();

        for (uint32_t reg_id_offset = 0; reg_id_offset < num_vregs; reg_id_offset++)
        {
            StaticInstPtr uop = new %(class_name)sMicro(machInst, machVtype, machVl,
                VD+reg_id_offset, VS1+reg_id_offset, VS2+reg_id_offset,
                VM, reg_id_offset*num_elements_per_reg, num_elements_per_reg,
                (element_count < num_elements_per_reg) ? element_count : num_elements_per_reg,
                sew, (uint64_t)machVtype.vma, (uint64_t)machVtype.vta);
            element_count = (element_count >= num_elements_per_reg) ? (element_count - num_elements_per_reg) : 0;
            microops.push_back(std::move(uop));
        }

        microops.front()->setFlag(IsFirstMicroop);
        microops.back()->setFlag(IsLastMicroop);

        flags[IsVector] = true;
    }
}};

def template VectorVdVs2Vs1MicroConstructor {{
    %(class_name)s::%(class_name)sMicro::%(class_name)sMicro(MachInst machInst,
        RiscvISA::VTYPE machVtype, uint32_t machVl,
        uint64_t vdRegID, uint64_t vs1RegID, uint64_t vs2RegID,
        uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t sew, uint64_t mask_policy, uint64_t tail_policy)
        : %(base_class)s("%(mnemonic)s", machInst, VectorVdVs2Vs1OpClass,
            vdRegID, vs1RegID, vs2RegID, vmRegID, mask_offset,
            num_elements_per_reg, num_non_tail_elements,
            sew, mask_policy, tail_policy)
    {
        %(set_reg_idx_arr)s;

        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
        // vreg[vdRegID] = vreg[vs1RegID] + vreg[vs2RegID]

        // Set register dependencies
        setDestRegIdx(_numDestRegs++, RegId(VecRegClass, vdRegID));
        setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, vs1RegID));
        setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, vs2RegID));
        if (vmRegID == 0) { // The mask register is always v0
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
        }

        _numVecSrcRegs = _numSrcRegs;

        flags[IsInteger] = false;
        flags[IsVector] = true;
        flags[IsMicroop] = true;
    }
}};

def template VectorVdVs2Vs1OpMicroExecute {{
    Fault
    %(class_name)s::%(class_name)sMicro::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        // Getting the source / destination registers
        // We only have one destination reg per micro op, so it's safe to say that the Vd is the first writable reg
        auto &Vd_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, 0);
        TheISA::VecRegContainer Vs1_container;
        xc->getRegOperand(this, 0, &Vs1_container);
        TheISA::VecRegContainer Vs2_container;
        xc->getRegOperand(this, 1, &Vs2_container);

        auto empty_vmask = std::vector<uint8_t>((num_non_tail_elements + 7)/8, 0xFF);
        uint8_t* vmask = empty_vmask.data();
        // Figure out if we need masks
        if (vmRegID == 0) {
            TheISA::VecRegContainer Vmask_container;
            xc->getRegOperand(this, 2, &Vmask_container);
            vmask = Vmask_container.as<uint8_t>();
        }

        bool utilize_mask = vmRegID == 0;

        if (fault == NoFault) {
            if (sew == 8) {
                auto Vd = Vd_container.as<uint8_t>();
                auto Vs2 = Vs2_container.as<uint8_t>();
                auto Vs1 = Vs1_container.as<uint8_t>();
                // process non-tail elements
                for (uint32_t regElemID = 0; regElemID < std::min(num_elements_per_reg, num_non_tail_elements); ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (sew == 16) {
                auto Vd = Vd_container.as<uint16_t>();
                auto Vs2 = Vs2_container.as<uint16_t>();
                auto Vs1 = Vs1_container.as<uint16_t>();
                // process non-tail elements
                for (uint32_t regElemID = 0; regElemID < std::min(num_elements_per_reg, num_non_tail_elements); ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (sew == 32) {
                auto Vd = Vd_container.as<uint32_t>();
                auto Vs2 = Vs2_container.as<uint32_t>();
                auto Vs1 = Vs1_container.as<uint32_t>();
                // process non-tail elements
                for (uint32_t regElemID = 0; regElemID < std::min(num_elements_per_reg, num_non_tail_elements); ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) { // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (sew == 64) {
                auto Vd = Vd_container.as<uint64_t>();
                auto Vs2 = Vs2_container.as<uint64_t>();
                auto Vs1 = Vs1_container.as<uint64_t>();
                // process non-tail elements
                for (uint32_t regElemID = 0; regElemID < std::min(num_elements_per_reg, num_non_tail_elements); ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) { // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else {
                std::string error = csprintf(
                    "Illegal vsewb value in VTYPE: 0x%x\n", sew);
                return std::make_shared<IllegalInstFault>(error, machInst);
            }

            if (fault == NoFault) {
                if (traceData) {
                    traceData->setData(Vd_container);
                }
            }
        }

        return fault;
    }
}};

def template VectorVdVs2Vs1MicroDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s::%(class_name)sMicro : public %(base_class)s
    {
      private:
        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
        // Sources: up to 8 vector regs starting at Vs2 and
        //          up to 8 vector regs starting at Vs1 and
        //          1 mask register.
        RegId srcRegIdxArr[8 + 8 + 1];
        // Destinations: up to 8 vector regs starting at Vd
        RegId destRegIdxArr[8];

      public:
        /// Constructor.
        %(class_name)sMicro(MachInst machInst, RiscvISA::VTYPE machVtype,
        uint32_t machVl, uint64_t vdRegID, uint64_t vs1RegID,
        uint64_t vs2RegID, uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t sew, uint64_t mask_policy, uint64_t tail_policy);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorVdVs2Vs1MacroOp(code, *opt_flags) {{
    macro_iop = InstObjParams(name, Name, 'VectorVdVs2Vs1MacroOp', code, opt_flags)
    header_output = VectorMacroDeclare.subst(macro_iop)
    decoder_output = VectorVdVs2Vs1MacroOpConstructor.subst(macro_iop)
    decode_block = VectorMacroDecode.subst(macro_iop)
    exec_output = VectorMacroExecute.subst(macro_iop)


    uop_iop = InstObjParams(name, Name, 'VectorVdVs2Vs1MicroOp', code, opt_flags)
    header_output += VectorVdVs2Vs1MicroDeclare.subst(uop_iop)
    decoder_output += VectorVdVs2Vs1MicroConstructor.subst(uop_iop)
    decode_block += VectorDecode.subst(uop_iop)
    exec_output += VectorVdVs2Vs1OpMicroExecute.subst(uop_iop)
}};

// --- End of VectorVdVs2Vs1

// --- Start of VectorSameElementWidthIntegerReductionOpMacro

def template VectorSameElementWidthIntegerReductionMacroConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorVdVs2Vs1MacroOpClass, machVtype, machVl, vlen)
    {
        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57

        //_numTypedDestRegs[VecRegClass] =
        //    ceil((float) machVl / (VecRegSizeBytes / sewb));
        //assert((VD % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);
        //assert((VS1 % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);
        //assert((VS2 % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);

        auto sew = getSew(machVtype.vsew);
        uint32_t num_elements_per_reg = vlen / sew;
        uint32_t element_count = machVl;

        auto num_regs = vlmulToNumRegs(machVtype.vlmul);
        microops = std::vector<StaticInstPtr>();

        for (uint32_t reg_id_offset = 0; reg_id_offset < num_regs; reg_id_offset++)
        {
            bool use_VS1 = reg_id_offset == 0;
            StaticInstPtr uop = new %(class_name)sMicro(machInst, machVtype, machVl,
                VD, VS1, VS2+reg_id_offset, // Keep VS1 to create the read dependency on VS1
                VM, reg_id_offset*num_elements_per_reg, num_elements_per_reg,
                (element_count < num_elements_per_reg) ? element_count : num_elements_per_reg,
                sew, (uint64_t)machVtype.vma, (uint64_t)machVtype.vta, use_VS1);
            element_count = (element_count >= num_elements_per_reg) ? (element_count - num_elements_per_reg) : 0;
            microops.push_back(std::move(uop));
        }

        microops.front()->setFlag(IsFirstMicroop);
        microops.back()->setFlag(IsLastMicroop);

        flags[IsVector] = true;
    }
}};

def template VectorSameElementWidthIntegerReductionMicroDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s::%(class_name)sMicro : public %(base_class)s
    {
      private:
        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
        // Sources: up to 8 vector regs starting at Vs2 and
        //          one scalar in Vs1 and
        //          1 mask register.
        RegId srcRegIdxArr[8 + 1 + 1];
        // Destinations: One vector containing a scalar
        RegId destRegIdxArr[1];
        bool use_VS1;

      public:
        /// Constructor.
        %(class_name)sMicro(MachInst machInst, RiscvISA::VTYPE machVtype,
        uint32_t machVl, uint64_t vdRegID, uint64_t vs1RegID,
        uint64_t vs2RegID, uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t sew, uint64_t mask_policy, uint64_t tail_policy,
        bool use_VS1);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def template VectorSameElementWidthIntegerReductionMicroConstructor {{
    %(class_name)s::%(class_name)sMicro::%(class_name)sMicro(MachInst machInst,
        RiscvISA::VTYPE machVtype, uint32_t machVl,
        uint64_t vdRegID, uint64_t vs1RegID, uint64_t vs2RegID,
        uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t sew, uint64_t mask_policy, uint64_t tail_policy, bool use_VS1)
        : %(base_class)s("%(mnemonic)s", machInst, VectorVdVs2Vs1OpClass,
            vdRegID, vs1RegID, vs2RegID, vmRegID, mask_offset,
            num_elements_per_reg, num_non_tail_elements,
            sew, mask_policy, tail_policy)
    {
        %(set_reg_idx_arr)s;

        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
        // vreg[vdRegID] = vreg[vs1RegID] + vreg[vs2RegID]

        // Set register dependencies
        setDestRegIdx(_numDestRegs++, RegId(VecRegClass, vdRegID));
        setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, vs1RegID));
        setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, vs2RegID));
        if (vmRegID == 0) { // The mask register is always v0
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
        }

        this->use_VS1 = use_VS1;

        _numVecSrcRegs = _numSrcRegs;

        flags[IsInteger] = false;
        flags[IsVector] = true;
        flags[IsMicroop] = true;
    }
}};

def template VectorSameElementWidthIntegerReductionMicroExecute {{
    Fault
    %(class_name)s::%(class_name)sMicro::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        // Getting the source / destination registers
        // We only have one destination reg per micro op, so it's safe to say that the Vd is the first writable reg
        auto &Vd_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, 0);
        TheISA::VecRegContainer Vs1_container;
        xc->getRegOperand(this, 0, &Vs1_container);
        TheISA::VecRegContainer Vs2_container;
        xc->getRegOperand(this, 1, &Vs2_container);

        auto empty_vmask = std::vector<uint8_t>((num_non_tail_elements + 7)/8, 0xFF);
        uint8_t* vmask = empty_vmask.data();
        // Figure out if we need masks
        if (vmRegID == 0) {
            TheISA::VecRegContainer Vmask_container;
            xc->getRegOperand(this, 2, &Vmask_container);
            vmask = Vmask_container.as<uint8_t>();
        }

        bool utilize_mask = vmRegID == 0;

        if (fault == NoFault) {
            if (sew == 8) {
                auto Vd = Vd_container.as<uint8_t>();
                auto Vs2 = Vs2_container.as<uint8_t>();
                auto Vs1 = Vs1_container.as<uint8_t>();
                if (this->use_VS1)
                    Vd[0] = Vs1[0];
                // process non-tail elements
                for (uint32_t regElemID = 0; regElemID < std::min(num_elements_per_reg, num_non_tail_elements); ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (sew == 16) {
                auto Vd = Vd_container.as<uint16_t>();
                auto Vs2 = Vs2_container.as<uint16_t>();
                auto Vs1 = Vs1_container.as<uint16_t>();
                if (this->use_VS1)
                    Vd[0] = Vs1[0];
                // process non-tail elements
                for (uint32_t regElemID = 0; regElemID < std::min(num_elements_per_reg, num_non_tail_elements); ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (sew == 32) {
                auto Vd = Vd_container.as<uint32_t>();
                auto Vs2 = Vs2_container.as<uint32_t>();
                auto Vs1 = Vs1_container.as<uint32_t>();
                if (this->use_VS1)
                    Vd[0] = Vs1[0];
                // process non-tail elements
                for (uint32_t regElemID = 0; regElemID < std::min(num_elements_per_reg, num_non_tail_elements); ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) { // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else if (sew == 64) {
                auto Vd = Vd_container.as<uint64_t>();
                auto Vs2 = Vs2_container.as<uint64_t>();
                auto Vs1 = Vs1_container.as<uint64_t>();
                if (this->use_VS1)
                    Vd[0] = Vs1[0];
                // process non-tail elements
                for (uint32_t regElemID = 0; regElemID < std::min(num_elements_per_reg, num_non_tail_elements); ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) { // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
                // TODO: apply tail policy to tail elements
            } else {
                std::string error = csprintf(
                    "Illegal vsewb value in VTYPE: 0x%x\n", sew);
                return std::make_shared<IllegalInstFault>(error, machInst);
            }

            if (fault == NoFault) {
                if (traceData) {
                    traceData->setData(Vd_container);
                }
            }
        }

        return fault;
    }
}};

def format VectorSameElementWidthIntegerReductionMacroOp(code, *opt_flags) {{
    macro_iop = InstObjParams(name, Name, 'VectorVdVs2Vs1MacroOp', code, opt_flags)
    header_output = VectorMacroDeclare.subst(macro_iop)
    decoder_output = VectorSameElementWidthIntegerReductionMacroConstructor.subst(macro_iop)
    decode_block = VectorMacroDecode.subst(macro_iop)
    exec_output = VectorMacroExecute.subst(macro_iop)


    uop_iop = InstObjParams(name, Name, 'VectorVdVs2Vs1MicroOp', code, opt_flags)
    header_output += VectorSameElementWidthIntegerReductionMicroDeclare.subst(uop_iop)
    decoder_output += VectorSameElementWidthIntegerReductionMicroConstructor.subst(uop_iop)
    decode_block += VectorMicroDecode.subst(uop_iop)
    exec_output += VectorSameElementWidthIntegerReductionMicroExecute.subst(uop_iop)
}};

// --- End of VectorSameElementWidthIntegerReductionOpMacro

// --- Start of VectorSingleWidthIntegerReduction

def template VectorSingleWidthIntegerReductionConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorVdVs2Vs1OpClass)
    {
        %(set_reg_idx_arr)s;

        // Example:
        // vredsum.vs     31..26=0x00 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
        uint32_t sewb = getSew(machVtype.vsew) / 8;

        uint32_t numVs2Regs = ceil((float) machVl / (VecRegSizeBytes / sewb));
        assert((VS2 % alignToPowerOfTwo(numVs2Regs)) == 0);

        _numTypedDestRegs[VecRegClass] = 1;

        setDestRegIdx(_numDestRegs++, RegId(VecRegClass, VD));

        setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, VS1));

        for (int i = 0; i < numVs2Regs; ++i) {
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, VS2 + i));
        }

        if (VM == 0) {
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
            ++_numVecSrcRegs;
        }

        flags[IsInteger] = true;
        flags[IsVector] = true;;
    }
}};

def template VectorSingleWidthIntegerReductionExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        uint32_t vl = xc->readMiscReg(MISCREG_VL);
        VTYPE vtype = xc->readMiscReg(MISCREG_VTYPE);
        size_t sewb = getSew(vtype.vsew) / 8;

        if (VM == 0) {
            if (VD == 0 || VS2 == 0) {
                std::string error =
                    csprintf("Masked VectorSingleWidthIntegerReduction using v0 as src/dst register\n");
                return std::make_shared<IllegalInstFault>(error, machInst);
            }
        }

        uint32_t numVs2Regs = ceil((float) vl / (VecRegSizeBytes / sewb));

        // The reduction instructions operate on Vd[0], Vs1[0] and all of Vs2.
        auto &Vd_0_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, 0);
        TheISA::VecRegContainer Vs1_0_container;
        xc->getRegOperand(this, 0, &Vs1_0_container);

        for (uint32_t vs2RegID = 0; vs2RegID < numVs2Regs; ++vs2RegID) {
            uint32_t vmask = UINT32_MAX;
            if (VM == 0) {
                TheISA::VecRegContainer Vmask_container;
                xc->getRegOperand(this, _numSrcRegs - 1, &Vmask_container);
                switch(sewb) {
                    case 1:
                        vmask = Vmask_container.as<uint32_t>()[vs2RegID];
                        break;
                    case 2:
                        vmask = Vmask_container.as<uint16_t>()[vs2RegID];
                        break;
                    case 4:
                        vmask = Vmask_container.as<uint8_t>()[vs2RegID];
                        break;
                    case 8:
                        vmask = Vmask_container.as<uint8_t>()[vs2RegID/2];
                        vmask = (vmask >> (vs2RegID % 2));
                        break;
                }
            }

            TheISA::VecRegContainer Vs2_container;
            xc->getRegOperand(this, vs2RegID + 1, &Vs2_container);

            uint32_t num_elements_in_src_reg =
                (VecRegSizeBytes/sewb) > vl ? vl : (VecRegSizeBytes/sewb);

            if (sewb == 1) {
                auto Vd0 = Vd_0_container.as<uint8_t>();
                auto Vs1_0 = Vs1_0_container.as<uint8_t>();
                auto Vs2 = Vs2_container.as<uint8_t>();

                for (uint32_t vs2RegElemID = 0; vs2RegElemID < num_elements_in_src_reg; ++vs2RegElemID) {
                    if (bits(vmask, vs2RegElemID, vs2RegElemID) == 0) {
                        continue;
                    }

                    %(code)s;
                }
            } else if (sewb == 2) {
                auto Vd0 = Vd_0_container.as<uint16_t>();
                auto Vs1_0 = Vs1_0_container.as<uint16_t>();
                auto Vs2 = Vs2_container.as<uint16_t>();

                for (uint32_t vs2RegElemID = 0; vs2RegElemID < num_elements_in_src_reg; ++vs2RegElemID) {
                    if (bits(vmask, vs2RegElemID, vs2RegElemID) == 0) {
                        continue;
                    }

                    %(code)s;
                }
            } else if (sewb == 4) {
                auto Vd0 = Vd_0_container.as<uint32_t>();
                auto Vs1_0 = Vs1_0_container.as<uint32_t>();
                auto Vs2 = Vs2_container.as<uint32_t>();

                for (uint32_t vs2RegElemID = 0; vs2RegElemID < num_elements_in_src_reg; ++vs2RegElemID) {
                    if (bits(vmask, vs2RegElemID, vs2RegElemID) == 0) {
                        continue;
                    }

                    %(code)s;
                }
            } else if (sewb == 8) {
                auto Vd0 = Vd_0_container.as<uint64_t>();
                auto Vs1_0 = Vs1_0_container.as<uint64_t>();
                auto Vs2 = Vs2_container.as<uint64_t>();

                for (uint32_t vs2RegElemID = 0; vs2RegElemID < num_elements_in_src_reg; ++vs2RegElemID) {
                    if (bits(vmask, vs2RegElemID, vs2RegElemID) == 0) {
                        continue;
                    }

                    %(code)s;
                }
            } else {
                std::string error = csprintf(
                    "Illegal vsewb value in VTYPE: 0x%x\n", vtype.vsew);
                return std::make_shared<IllegalInstFault>(error, machInst);
            }
        }

        if (fault == NoFault) {
            if (traceData) {
                traceData->setData(Vd_0_container);
            }
        }

        return fault;
    }
}};

def template VectorSingleWidthIntegerReductionDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        // Example:
        // vredsum.vs     31..26=0x00 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
        // Sources: up to 8 vector regs starting at Vs2 and
        //          1 vector reg starting at Vs1 and
        //          1 mask register.
        RegId srcRegIdxArr[8 + 1 + 1];
        // Destinations: up to 1 vector regs starting at Vd
        RegId destRegIdxArr[1];

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorSingleWidthIntegerReductionOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'VectorVdVs2Vs1Op', code, opt_flags)
    header_output = VectorSingleWidthIntegerReductionDeclare.subst(iop)
    decoder_output = VectorSingleWidthIntegerReductionConstructor.subst(iop)
    decode_block = VectorDecode.subst(iop)
    exec_output = VectorSingleWidthIntegerReductionExecute.subst(iop)
}};

// --- End of VectorSingleWidthIntegerReduction


// --- Start of VectorVWXUNARY0

def template VectorVWXUNARY0Constructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorVWXUNARY0OpClass)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
    }
}};

def template VectorVWXUNARY0Execute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        VTYPE vtype = xc->readMiscReg(MISCREG_VTYPE);
        size_t sewb = getSew(vtype.vsew) / 8;

        uint64_t Rd = 0;
        TheISA::VecRegContainer Vs2_container;
        xc->getRegOperand(this, 0, &Vs2_container);

        if (fault == NoFault) {
            if (sewb == 1) {
                auto Vs2 = Vs2_container.as<uint8_t>();
                %(code)s;
                Rd = sext<8>(Rd);
            } else if (sewb == 2) {
                auto Vs2 = Vs2_container.as<uint16_t>();
                %(code)s;
                Rd = sext<16>(Rd);
            } else if (sewb == 4) {
                auto Vs2 = Vs2_container.as<uint32_t>();
                %(code)s;
                Rd = sext<32>(Rd);
            } else if (sewb == 8) {
                auto Vs2 = Vs2_container.as<uint64_t>();
                %(code)s;
                Rd = sext<64>(Rd);
            } else {
                std::string error = csprintf(
                    "Illegal vsewb value in VTYPE: 0x%x\n", vtype.vsew);
                fault = std::make_shared<IllegalInstFault>(error, machInst);
            }

            if (fault == NoFault) {
                %(op_wb)s;
            }
        }
        return fault;
    }
}};

def template VectorVWXUNARY0Declare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        // Example:
        // vmv.x.s        31..26=0x10 25=1 vs2 19..15=0 14..12=0x2 rd 6..0=0x57
        RegId srcRegIdxArr[8];

        // Rd
        RegId destRegIdxArr[1];

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorVWXUNARY0Op(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'VectorVWXUNARY0Op', code, opt_flags)
    header_output = VectorVWXUNARY0Declare.subst(iop)
    decoder_output = VectorVWXUNARY0Constructor.subst(iop)
    decode_block = VectorDecode.subst(iop)
    exec_output = VectorVWXUNARY0Execute.subst(iop)
}};

// --- End of VectorVWXUNARY0


// --- Start of OPIVI

def template VectorOPIVIConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorOPIVIOpClass)
    {
        %(set_reg_idx_arr)s;

        // Example:
        // vadd.vi        31..26=0x00 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
        uint32_t sewb = getSew(machVtype.vsew) / 8;

        _numVecSrcRegs = _numTypedDestRegs[VecRegClass] =
            ceil((float) machVl / (VecRegSizeBytes / sewb));
        assert((VD % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);
        assert((VS2 % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);

        for (int i = 0; i < _numTypedDestRegs[VecRegClass]; ++i) {
            setDestRegIdx(_numDestRegs++, RegId(VecRegClass, VD + i));
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, VS2 + i));
        }

        if (VM == 0) {
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
            ++_numVecSrcRegs;
        }

        flags[IsInteger] = true;
        flags[IsVector] = true;;
    }
}};

def template VectorOPIVIExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        uint32_t vl = xc->readMiscReg(MISCREG_VL);
        VTYPE vtype = xc->readMiscReg(MISCREG_VTYPE);
        size_t sewb = getSew(vtype.vsew) / 8;

        if (VM == 0) {
             if (VD == 0 || VS2 == 0) {
                std::string error =
                    csprintf("Masked VectorOPIVI using v0 "
                             "as src/dst register\n");
                return std::make_shared<IllegalInstFault>(error, machInst);
             }
        }

        for (uint32_t vecRegID = 0; vecRegID < _numTypedDestRegs[VecRegClass]; ++vecRegID) {
            auto &Vd_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, vecRegID);
            TheISA::VecRegContainer Vs2_container;
            xc->getRegOperand(this, vecRegID, &Vs2_container);

            uint32_t vmask = UINT32_MAX;
            if (VM == 0) {
                TheISA::VecRegContainer Vmask_container;
                xc->getRegOperand(this, _numSrcRegs - 1, &Vmask_container);
                switch(sewb) {
                    case 1:
                        vmask = Vmask_container.as<uint32_t>()[vecRegID];
                        break;
                    case 2:
                        vmask = Vmask_container.as<uint16_t>()[vecRegID];
                        break;
                    case 4:
                        vmask = Vmask_container.as<uint8_t>()[vecRegID];
                        break;
                    case 8:
                        vmask = Vmask_container.as<uint8_t>()[vecRegID/2];
                        vmask = (vmask >> (vecRegID % 2));
                        break;
                }
            }

            size_t num_target_elements_in_reg =
                (VecRegSizeBytes/sewb) > vl ? vl : (VecRegSizeBytes/sewb);

            if (fault == NoFault) {
                if (sewb == 1) {
                    auto Vd = Vd_container.as<uint8_t>();
                    auto Vs2 = Vs2_container.as<uint8_t>();
                    for (size_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }
                        %(code)s;
                    }
                } else if (sewb == 2) {
                    auto Vd = Vd_container.as<uint16_t>();
                    auto Vs2 = Vs2_container.as<uint16_t>();
                    for (size_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }
                        %(code)s;
                    }
                } else if (sewb == 4) {
                    auto Vd = Vd_container.as<uint32_t>();
                    auto Vs2 = Vs2_container.as<uint32_t>();
                    for (size_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }
                        %(code)s;
                    }
                } else if (sewb == 8) {
                    auto Vd = Vd_container.as<uint64_t>();
                    auto Vs2 = Vs2_container.as<uint64_t>();
                    for (size_t regElemID = 0; regElemID < num_target_elements_in_reg; ++regElemID) {
                        if (bits(vmask, regElemID, regElemID) == 0) {
                            continue;
                        }
                        %(code)s;
                    }
                } else {
                    std::string error = csprintf(
                        "Illegal vsewb value in VTYPE: 0x%x\n", vtype.vsew);
                    fault = std::make_shared<IllegalInstFault>(error, machInst);
                }

                if (fault == NoFault) {
                    if (traceData) {
                        traceData->setData(Vd_container);
                    }
                }

                vl = vl - num_target_elements_in_reg;
            }
        }

        return fault;
    }
}};

def template VectorOPIVIDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        // Example:
        // vadd.vi        31..26=0x00 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
        // Sources: up to 8 vector regs starting at Vs2 and
        //          1 mask register.
        RegId srcRegIdxArr[8 + 8 + 1];
        // Destinations: up to 8 vector regs starting at Vd
        RegId destRegIdxArr[8];

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorOPIVIOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'VectorOPIVIOp', code, opt_flags)
    header_output = VectorOPIVIDeclare.subst(iop)
    decoder_output = VectorOPIVIConstructor.subst(iop)
    decode_block = VectorDecode.subst(iop)
    exec_output = VectorOPIVIExecute.subst(iop)
}};

// --- End of OPIVI

// --- Start of OPIVI

def template VectorOPIVIMacroOpConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorOPIVIMacroClass, machVtype, machVl, vlen)
    {
        // Example:
        // vadd.vi        31..26=0x00 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
        
        //_numVecSrcRegs = _numTypedDestRegs[VecRegClass] =
        //    ceil((float) machVl / (VecRegSizeBytes / sewb));
        //assert((VD % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);
        //assert((VS2 % alignToPowerOfTwo(_numTypedDestRegs[VecRegClass])) == 0);

        auto sew = getSew(machVtype.vsew);
        uint32_t num_elements_per_reg = vlen / sew;
        uint32_t element_count = machVl;

        auto num_vregs = vlmulToNumRegs(machVtype.vlmul);

        for (uint32_t reg_id_offset = 0; reg_id_offset < num_vregs; reg_id_offset++)
        {
            StaticInstPtr uop = new %(class_name)sMicro(machInst, machVtype, machVl,
                VD+reg_id_offset, VS2+reg_id_offset, VM, reg_id_offset*num_elements_per_reg, num_elements_per_reg,
                (element_count < num_elements_per_reg) ? element_count : num_elements_per_reg,
                sew, (uint64_t)machVtype.vma, (uint64_t)machVtype.vta);
            element_count = (element_count >= num_elements_per_reg) ? (element_count - num_elements_per_reg) : 0;
            microops.push_back(std::move(uop));
        }

        microops.front()->setFlag(IsFirstMicroop);
        microops.back()->setFlag(IsLastMicroop);

        flags[IsVector] = true;
    }
}};

def template VectorOPIVIMicroOpConstructor {{
    %(class_name)s::%(class_name)sMicro::%(class_name)sMicro(MachInst machInst,
        RiscvISA::VTYPE machVtype, uint32_t machVl,
        uint64_t vdRegID, uint64_t vs2RegID,
        uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t sew, uint64_t mask_policy, uint64_t tail_policy)
        : %(base_class)s("%(mnemonic)s", machInst, VectorVdVs2Vs1OpClass,
            vdRegID, vs2RegID, vmRegID, mask_offset,
            num_elements_per_reg, num_non_tail_elements,
            sew, mask_policy, tail_policy)
    {
        %(set_reg_idx_arr)s;

        // Example:
        // vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
        // vreg[vdRegID] = vreg[vs1RegID] + vreg[vs2RegID]

        // Set register dependencies
        setDestRegIdx(_numDestRegs++, RegId(VecRegClass, vdRegID));
        setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, vs2RegID));
        if (vmRegID == 0) { // The mask register is always v0
            // Masked instruction.
            setSrcRegIdx(_numSrcRegs++, RegId(VecRegClass, 0));
        }

        _numVecSrcRegs = _numSrcRegs;

        flags[IsInteger] = false;
        flags[IsVector] = true;
        flags[IsMicroop] = true;
    }
}};

def template VectorOPIVIMicroExecute {{
    Fault
    %(class_name)s::%(class_name)sMicro::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        //uint32_t vl = xc->readMiscReg(MISCREG_VL);
        //VTYPE vtype = xc->readMiscReg(MISCREG_VTYPE);
        //size_t sewb = getSew(vtype.vsew) / 8;

        if (VM == 0) {
             if (VD == 0 || VS2 == 0) {
                std::string error =
                    csprintf("Masked VectorOPIVI using v0 "
                             "as src/dst register\n");
                return std::make_shared<IllegalInstFault>(error, machInst);
             }
        }

        auto empty_vmask = std::vector<uint8_t>((num_non_tail_elements + 7)/8, 0xFF);
        uint8_t* vmask = empty_vmask.data();
        // Figure out if we need masks
        if (vmRegID == 0) {
            TheISA::VecRegContainer Vmask_container;
            xc->getRegOperand(this, 2, &Vmask_container);
            vmask = Vmask_container.as<uint8_t>();
        }

        bool utilize_mask = vmRegID == 0;

        auto &Vd_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, 0);
        TheISA::VecRegContainer Vs2_container;
        xc->getRegOperand(this, 0, &Vs2_container);

        if (fault == NoFault) {
            if (sew == 8) {
                auto Vd = Vd_container.as<uint8_t>();
                auto Vs2 = Vs2_container.as<uint8_t>();
                for (size_t regElemID = 0; regElemID < num_elements_per_reg; ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
            } else if (sew == 16) {
                auto Vd = Vd_container.as<uint16_t>();
                auto Vs2 = Vs2_container.as<uint16_t>();
                for (size_t regElemID = 0; regElemID < num_elements_per_reg; ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
            } else if (sew == 32) {
                auto Vd = Vd_container.as<uint32_t>();
                auto Vs2 = Vs2_container.as<uint32_t>();
                for (size_t regElemID = 0; regElemID < num_elements_per_reg; ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
            } else if (sew == 64) {
                auto Vd = Vd_container.as<uint64_t>();
                auto Vs2 = Vs2_container.as<uint64_t>();
                for (size_t regElemID = 0; regElemID < num_elements_per_reg; ++regElemID) {
                    uint32_t maskElemID = mask_offset + regElemID;
                    if (utilize_mask && (bits(vmask[maskElemID / 8], maskElemID % 8, maskElemID % 8) == 0)) {  // "mask undisturbed" policy
                        continue;
                    }
                    %(code)s;
                }
            } else {
                std::string error = csprintf(
                    "Illegal vsewb value in VTYPE: 0x%x\n", sew);
                fault = std::make_shared<IllegalInstFault>(error, machInst);
            }
            if (fault == NoFault) {
                if (traceData) {
                    traceData->setData(Vd_container);
                }
            }
        }

        return fault;
    }
}};

def template VectorOPIVIMicroDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s::%(class_name)sMicro : public %(base_class)s
    {
      private:
        // Example:
        // vadd.vi        31..26=0x00 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
        // Sources: up to 8 vector regs starting at Vs2 and
        //          1 mask register.
        RegId srcRegIdxArr[8 + 1];
        // Destinations: up to 8 vector regs starting at Vd
        RegId destRegIdxArr[8];

      public:
        /// Constructor.
        %(class_name)sMicro(MachInst machInst,
        RiscvISA::VTYPE machVtype, uint32_t machVl,
        uint64_t vdRegID, uint64_t vs2RegID,
        uint64_t vmRegID, uint64_t mask_offset,
        uint64_t num_elements_per_reg, uint64_t num_non_tail_elements,
        uint64_t sew, uint64_t mask_policy, uint64_t tail_policy);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorOPIVIMacroOp(code, *opt_flags) {{
    macro_iop = InstObjParams(name, Name, 'VectorOPIVIMacroOp', code, opt_flags)
    header_output = VectorMacroDeclare.subst(macro_iop)
    decoder_output = VectorOPIVIMacroOpConstructor.subst(macro_iop)
    decode_block = VectorMacroDecode.subst(macro_iop)
    exec_output = VectorMacroExecute.subst(macro_iop)


    uop_iop = InstObjParams(name, Name, 'VectorOPIVIMicroOp', code, opt_flags)
    header_output += VectorOPIVIMicroDeclare.subst(uop_iop)
    decoder_output += VectorOPIVIMicroOpConstructor.subst(uop_iop)
    decode_block += VectorMicroDecode.subst(uop_iop)
    exec_output += VectorOPIVIMicroExecute.subst(uop_iop)
}};

// --- End of OPIVI

// Start of VectorVRXUNARY0

def template VectorVRXUNARY0Constructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorVRXUNARY0OpClass)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
    }
}};

def template VectorVRXUNARY0Execute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        VTYPE vtype = xc->readMiscReg(MISCREG_VTYPE);
        size_t sewb = getSew(vtype.vsew) / 8;

        uint64_t Rs1 = xc->getRegOperand(this, 0);
        auto &Vd_container = *(TheISA::VecRegContainer *)xc->getWritableRegOperand(this, 0);

        if (fault == NoFault) {
            Rs1 &= mask(sewb * 8);
            if (sewb == 1) {
                auto Vd = Vd_container.as<uint8_t>();
                %(code)s;
            } else if (sewb == 2) {
                auto Vd = Vd_container.as<uint16_t>();
                %(code)s;
            } else if (sewb == 4) {
                auto Vd = Vd_container.as<uint32_t>();
                %(code)s;
            } else if (sewb == 8) {
                auto Vd = Vd_container.as<uint64_t>();
                %(code)s;
            } else {
                std::string error = csprintf(
                    "Illegal vsewb value in VTYPE: 0x%x\n", vtype.vsew);
                fault = std::make_shared<IllegalInstFault>(error, machInst);
            }

            if (fault == NoFault) {
                if (traceData) {
                    traceData->setData(Vd_container);
                }
            }
        }
        return fault;
    }
}};

def template VectorVRXUNARY0Declare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        // Example:
        // vmv.s.x        31..26=0x10 25=1 24..20=0 rs1 14..12=0x6 vd 6..0=0x57
        RegId srcRegIdxArr[1];

        // Rd
        RegId destRegIdxArr[8];

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format VectorVRXUNARY0Op(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'VectorVRXUNARY0Op', code, opt_flags)
    header_output = VectorVRXUNARY0Declare.subst(iop)
    decoder_output = VectorVRXUNARY0Constructor.subst(iop)
    decode_block = VectorDecode.subst(iop)
    exec_output = VectorVRXUNARY0Execute.subst(iop)
}};

// --- End of VectorVRXUNARY0


// --- Start of VectorCfg

def template VectorCfgConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst, RiscvISA::VTYPE machVtype, uint32_t machVl, int vlen)
        : %(base_class)s("%(mnemonic)s", machInst, VectorCfgOpClass)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
        flags[IsVector] = true;
    }
}};

def template VectorConfigExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        RiscvISA::VTYPE new_vtype = 0xFFFFFFFF; // will have an illegal [30:8]

        %(op_decl)s;
        %(op_rd)s;

        if (fault == NoFault) {

            %(code)s;

            if (fault == NoFault) {
                %(op_wb)s;
            }
        }

        //NPC = NPC;
        RiscvISA::PCState newPCState;
        set(newPCState, xc->pcState());
        newPCState.vtype(new_vtype);
        newPCState.vl(Rd); // the new vl is returned in Rd
        xc->pcState(newPCState);

        xc->tcBase()->pcState(newPCState);

        return fault;
    }
}};

def template VectorConfigBranchTarget {{
    std::unique_ptr<PCStateBase>
    %(class_name)s::branchTarget(ThreadContext *tc) const
    {
        RiscvISA::VTYPE new_vtype = 0xFFFFFFFF;
        uint32_t new_vl = 0;
        %(branch_target_code)s
        PCStateBase *pc_ptr = tc->pcState().clone();
        pc_ptr->as<RiscvISA::PCState>().vtype(new_vtype);
        pc_ptr->as<RiscvISA::PCState>().vl(new_vl);
        return std::unique_ptr<PCStateBase>{pc_ptr};
    }
}};

def format VectorCfgOp(execute_code, branch_target_code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'VectorCfgOp', {'code': execute_code, 'branch_target_code': branch_target_code}, opt_flags)
    header_output = VectorCfgDeclare.subst(iop)
    decoder_output = VectorCfgConstructor.subst(iop)
    decode_block = VectorDecode.subst(iop)
    exec_output = VectorConfigExecute.subst(iop)
    exec_output += VectorConfigBranchTarget.subst(iop)
}};

// --- End of VectorCfg

// Others
def template VectorDecode {{
    return new %(class_name)s(machInst, machVtype, machVl, vlen);
}};

def template VectorMicroDecode {{
    return new %(class_name)s(machInst, machVtype, machVl, vlen);
}};


def template VectorDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def template VectorMacroDecode {{
    return new %(class_name)s(machInst, machVtype, machVl, vlen);
}};

def template VectorMacroExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        std::string error = csprintf("Executing Macro Inst\n");
        return std::make_shared<IllegalInstFault>(error, machInst);
    }
}};

def template VectorCfgDeclare {{
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst, RiscvISA::VTYPE vtype, uint32_t vl, int vlen);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        virtual std::unique_ptr<PCStateBase> branchTarget(ThreadContext *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};
